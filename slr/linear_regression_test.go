package slr

import (
	"testing"
	"fmt"
	"encoding/json"
)

func Test_CalcCoefficientPerson(t *testing.T) {
	var vx = []float64{0,0,0,-400,3957,22760,19991,1075,6618,6812,13843,4380,11720,10062,-3608,100,0,12404,12786,16086,8659,-477,-500,9029,6118,26316,15116,8230,-168,14643,2624,16604,20065,5064,6728,-25742,-22807,-744,-4656,871,-10724,14457,-11454,-10062,42635,8466,16465,57,6059,-16316,-8959,8442,5101,3200,242,-25969,-14906,-10518,10336,-14643,-1214,-6832,-17994,-5064,-12554,2528,305,-375,11709,12448,-3119,-18837,4522,10632,1827,11311,-13125,-12461,-19010,25010,19004,-1847,6293,-5941,-7431,-620,5668,0,-9000,7934,11306,-7388,-2071,7304,6778,16327,14024,24284,-13671,-20131,3663,6968,2528,-795,-18929,-19449,-3340,4132,3594,-329,-10766,-4504,-11394,-6288,34975,5385,7702,8898,5958,-7934,-12716,-2094,0,-2136,1247,9137,-14329,-24812,6055,18819,14848,5079,15479,-9837,-25673,20188,10105,20617,7226,-19478,-5854,-2091,5013,16970,-16682,27620,5277,-8898,-7294,24317,3844,18358,39969,23847,-7950,-27992,17481,4245,7104,24874,-7895,-12047,-19007,15632,3889,15022,-5064,-24749,-10820,-5203,15090,24184,5807,-16865,-11978,-33005,-18857,12008,32527,9130,36800,2796,-39939,-28041,8870,13979,5556,25728,-7736,-43693,-10616,9555,29009,-10505,22894,9187,-4540,0,50652,24867,-14317,-7779,3339,-105,-3921,13320,13233,7604,-1812,-5761,-40257,-21444,22930,19069,823,11854,-5528,-29973,-5423,23338,17252,29576,-14399,45590,-26783,-32787,19048,15184,-27632,-24260,11512,-16405,-14109,3459,36804,15138,7725,3347,-26116,-27345,28093,32121,-1271,14996,10897,-24416,-17509,19332,27619,6805,12509,-21571,-16658,-50717,57069,17770,25594,43210,-10621,2685,-13207,11164,44616,4560,-15899,-13274,-20638,-22959,22201,35028,-22557,-27594,-12267,-34749,-20500,8923,19079,-7621,-9988,-16504,-27027,-13718,4204,17013,-46898,1666,-35843,-58334,-8068,5351,12411,-1666,-23810,-6193,-23299,-14584,57263,11233,-21452,-15764,23752,-4097,-8157,7463,13242,18289,10886,-2002,-16976,-13639,27871,92537,-5044,-3295,3492,-28932,-9300,14630,30981,1299,952,138,-17433,-1826,18153,27213,-41507,5808,13660,-19605,-26685,17029,29066,18043,-6366,-9902,-25077,-9709,11548,56002,-18713,-78301,11371,-10901,-11149,26537,13628,-14220,-10690,17932,-13995,-9636,12808,17059,3369,-11665,-2340,-16966,-14448}
	var vy = []float64{0,0,-400,3957,22760,19991,1075,6618,6812,13843,4380,11720,10062,-3608,100,0,12404,12786,16086,8659,-477,-500,9029,6118,26316,15116,8230,-168,14643,2624,16604,20065,5064,6728,-25742,-22807,-744,-4656,871,-10724,14457,-11454,-10062,42635,8466,16465,57,6059,-16316,-8959,8442,5101,3200,242,-25969,-14906,-10518,10336,-14643,-1214,-6832,-17994,-5064,-12554,2528,305,-375,11709,12448,-3119,-18837,4522,10632,1827,11311,-13125,-12461,-19010,25010,19004,-1847,6293,-5941,-7431,-620,5668,0,-9000,7934,11306,-7388,-2071,7304,6778,16327,14024,24284,-13671,-20131,3663,6968,2528,-795,-18929,-19449,-3340,4132,3594,-329,-10766,-4504,-11394,-6288,34975,5385,7702,8898,5958,-7934,-12716,-2094,0,-2136,1247,9137,-14329,-24812,6055,18819,14848,5079,15479,-9837,-25673,20188,10105,20617,7226,-19478,-5854,-2091,5013,16970,-16682,27620,5277,-8898,-7294,24317,3844,18358,39969,23847,-7950,-27992,17481,4245,7104,24874,-7895,-12047,-19007,15632,3889,15022,-5064,-24749,-10820,-5203,15090,24184,5807,-16865,-11978,-33005,-18857,12008,32527,9130,36800,2796,-39939,-28041,8870,13979,5556,25728,-7736,-43693,-10616,9555,29009,-10505,22894,9187,-4540,0,50652,24867,-14317,-7779,3339,-105,-3921,13320,13233,7604,-1812,-5761,-40257,-21444,22930,19069,823,11854,-5528,-29973,-5423,23338,17252,29576,-14399,45590,-26783,-32787,19048,15184,-27632,-24260,11512,-16405,-14109,3459,36804,15138,7725,3347,-26116,-27345,28093,32121,-1271,14996,10897,-24416,-17509,19332,27619,6805,12509,-21571,-16658,-50717,57069,17770,25594,43210,-10621,2685,-13207,11164,44616,4560,-15899,-13274,-20638,-22959,22201,35028,-22557,-27594,-12267,-34749,-20500,8923,19079,-7621,-9988,-16504,-27027,-13718,4204,17013,-46898,1666,-35843,-58334,-8068,5351,12411,-1666,-23810,-6193,-23299,-14584,57263,11233,-21452,-15764,23752,-4097,-8157,7463,13242,18289,10886,-2002,-16976,-13639,27871,92537,-5044,-3295,3492,-28932,-9300,14630,30981,1299,952,138,-17433,-1826,18153,27213,-41507,5808,13660,-19605,-26685,17029,29066,18043,-6366,-9902,-25077,-9709,11548,56002,-18713,-78301,11371,-10901,-11149,26537,13628,-14220,-10690,17932,-13995,-9636,12808,17059,3369,-11665,-2340,-16966,-14448,34679}

	c := CalcCoefficientPerson(vx, vy)
	fmt.Println(c)
}

func Test_CalcSimpleLinearRegression(t *testing.T) {
	var (
		valuesX = []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}
		valuesY = []float64{684.20,584.10,765.38,892.28,885.40,677.02,1006.63,1122.06,1163.39,993.20,1312.46,1545.31,1596.20,1260.41,1735.16,2029.66,2107.79,1650.30,2304.40,2639.42}
		//valuesX = []float64{1.49,1.41,1.65,1.03,1.40,1.10,1.46,1.35,1.17,0.99}
		//valuesY = []float64{20.8,18.0,18.1,6.0,18.0,8.0,17.5,12.6,11.6,9.2}
	)

	lr := CalcSimpleLinearRegression(valuesX, valuesY)
	fmt.Println(lr)

	if body, err := json.Marshal(lr); err != nil {
		t.Fatal(err)
	} else {
		fmt.Println(string(body))
	}
}

func Test_CalcQuadraticLinearRegression(t *testing.T) {
	var (
		//valuesX = []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}
		//valuesY = []float64{684.20,584.10,765.38,892.28,885.40,677.02,1006.63,1122.06,1163.39,993.20,1312.46,1545.31,1596.20,1260.41,1735.16,2029.66,2107.79,1650.30,2304.40,2639.42}
		valuesX = []float64{1.49,1.41,1.65,1.03,1.40,1.10,1.46,1.35,1.17,0.99}
		valuesY = []float64{20.8,18.0,18.1,6.0,18.0,8.0,17.5,12.6,11.6,9.2}
	)

	lr, _ := CalcQuadraticLinearRegression(valuesX, valuesY)

	if body, err := json.Marshal(lr); err != nil {
		t.Fatal(err)
	} else {
		fmt.Println(string(body))
	}
}
